{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Example Redux Toolkit Store": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-store",
		"body": [
			"import { configureStore } from '@reduxjs/toolkit'",
			"import logger from 'redux-logger'",
			"//slices",
			"import { loadingSlice, todoSlice } from '../features';",
			"$1",
			"export const store = configureStore({",
			"    reducer:{",
			"       loading: loadingSlice,",
			"       todosList: todoSlice,",
			"    },",
			"    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),",
			"    devTools: process.env.NODE_ENV !== 'production',",
			"})",
			"$1",
			"export type RootState = ReturnType<typeof store.getState>",
			"export type AppDispatch = typeof store.dispatch;",
		],
		"description": "Example Redux Toolkit Store"
	},
	"Example1 Redux Toolkit Slice": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-slice1",
		"body": [
			"import { PayloadAction, createSlice } from '@reduxjs/toolkit';",
			"$2",
			"const initialState = {",
				"loading: true",
			"};",
			"$2",
			"export const loadingSlice = createSlice({",
			"   name: 'loading',",
			"   initialState,",
			"   reducers:{",
			"           setLoading: (state, action: PayloadAction<boolean>) => {",
			"           state.loading = action.payload;",
			"    }",
			"   }",
			"})",
			"$2",
			"export const { setLoading } = loadingSlice.actions;",
			"export default loadingSlice.reducer;",
		],
		"description": "Example1 Redux Toolkit Slice"
	},
	"Example2 Redux Toolkit Slice": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-slice2",
		"body": [
			"import {createSlice, PayloadAction} from '@reduxjs/toolkit';",
			"$2",
			"interface Todo{",
				"id?: number,",
				"title?:string,",
				"useId?:number,",
				"completed?: boolean",
			"}",
			"$2",
			"interface CustomerState{",
				"todos: Todo[]",
			"}",
			"$2",
			"const initialState: CustomerState = {",
				"todos: []",
			"};",
			"$2",
			"export const todoSlice = createSlice({",
			"   name: 'todos',",
			"   initialState,",
			"   reducers: {",
			"       setTodos: (state,action:PayloadAction<Todo[]>) => {",
			"           state.todos=action.payload;",
			"       }",
			"   }",
			"})",
			"$2",
			"export const { setTodos } = todoSlice.actions;",
			"export default todoSlice.reducer;",
		],
		"description": "Example2 Redux Toolkit Slice"
	},
	"React-Redux: useSelector - useDispatch": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-selector-dispatch example usage",
		"body": [
			"import { useSelector, useDispatch } from 'react-redux';",
			"import { setTodos } from '../features/todoSlice';",
			"$2",
			"// ...",
			"$2",
			"const dispatch = useDispatch()",
			"const todos = useSelector((state: RootState) => state.todosList.todos)",
			"$2",
			"useEffect(() => {",
			"   (async function():Promise<void>{",
			"      const res = await fetch('https://jsonplaceholder.typicode.com/todos')",
			"      const data = await res.json()",
			"      dispatch(setTodos(data))",
			"   })()",
			"},[dispatch])",
		],
		"description": "redux-selector-dispatch example usage"
	},
	"Error boundary component": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "error-boundary-component",
		"body": [
		"import { Component, ErrorInfo, PropsWithChildren, ReactNode } from 'react';",
		"$2",
		"interface Props {",
		"   render?: (error: Error | null) => ReactNode;",
		"}",
		"$2",
		"interface State {",
		"   hasError: boolean;",
		"   error: Error | null;",
		"}",
		"$2",
		"class ErrorBoundary extends Component<PropsWithChildren<Props>, State> {",
		"   public state: State = {",
		"       hasError: false,",
		"       error: null",
		"   };",
		"$2",
		"   public componentDidCatch(error: Error, errorInfo: ErrorInfo) {",
		"       console.error('Uncaught error:', error, errorInfo);",
		"       this.setState({ hasError: true, error });",
		"   }",
		"$2",
		"   render() {",
		"       const { hasError, error } = this.state;",
		"       const { children } = this.props;",

		"       if (hasError && !this.props.render) {",
		"           return (",
		"               <div>",
		"                   <p>Oops! ha ocurrido un error inesperado</p>",
		"                   {error?.toString()}",
		"               </div>",
		"           );",
		"        };",
		"$2",
		"       if (hasError && this.props.render) {",
		"           return this.props.render(error);",
		"       };",
		"$2",
		"       return children;",
		"    }",
		"}",
		"$2",
		"export default ErrorBoundary;",
		"$2",
		"/* Usage:",
		"<FinalErrorBoundary render={(error) => <p>{`Ups D: ${error}`}</p>}>",
      	    "<MyBug />",
        "</FinalErrorBoundary> */",
		"$2",
		],
		"description": "Error boundary component"
	},
	"Code splitting - Lazyload - Supense, example": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "lazyload-suspense-example",
		"body": [
			"import React from 'react';",
			"import { Route, Routes } from 'react-router-dom'",
			"$2",
			"// Dinamic views imports",
			"const DisignPatterns = React.lazy(() => import('../views/DisignPatterns'));",
			"const DisignPrincinples = React.lazy(() => import('../views/DisignPrincinples'));",
			"const ReduxToolkit = React.lazy(() => import('../views/ReduxToolkit'));",
			"$2",
			"const DrawerRoutes = () => {",
			"   return (",
			"       <React.Suspense fallback={<h1 style={{color:'red'}}>Loading...</h1>}>",
			"           <Routes>",
			"               <Route path='/' element={<DisignPrincinples />} />",
			"               <Route path='/disignPattern' element={<DisignPatterns />} />",
			"               <Route path='/disignPrinciples' element={<DisignPrincinples />} />",
			"               <Route path='/reduxToolkit' element={<ReduxToolkit />} />",
			"           </Routes>",
			"       </React.Suspense>",
			"    )",
			"}",
			"$2",
			"export default DrawerRoutes",
		],
		"description": "Example Redux Toolkit Store"
	},
	"ContextAPI-Provider-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-Provider",
		"body": [
			"import { createContext, useContext, useReducer } from 'react';",
			"import type { PropsWithChildren } from 'react'",
			"import {",
			"   CombinedActionType," ,
			"   CombinedInitialStateType," ,
			"   initialStateCombined,",
			"   reducerCombined" ,
			"} from './combinedReducers';",
			"$2",
			"export interface IStateContext {",
			"   state: CombinedInitialStateType;",
			"   dispatch: React.Dispatch<CombinedActionType>;",
			"}",
			"$2",
			"export const AppContext = createContext<IStateContext>(initialStateCombined);",
			"$2",
			"export const AppContextProvider = ({ children }: PropsWithChildren): JSX.Element => {",
			"$2",
			"   const [state, dispatch] = useReducer(reducerCombined, initialStateCombined)",
			"$2",
			"   return (",
			"       <AppContext.Provider value={{ state, dispatch }}>",
			"           {children}",
			"       </AppContext.Provider>",
			"   );",
			"}",
			"$2",
			"export const useAppContext = () => useContext(AppContext);",
		],
		"description": "Provider Context API example"
	},
	"ContextAPI-CombinedReducers-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-combinedReducers",
		"body": [
			"import combineReducers from 'react-combine-reducers';",
			"$2",
			"import {",
			"  ACTIONTYPE,",
			"  IAppContext,",
			"  appReducer,",
			"  initialState",
			"} from '../reducers/appReducer';",
			"import {",
			"  ACTION_TYPE_GLOBAL,",
			"  IglobalMsgState,",
			"  globalMsgReducer,",
			"  globalMsgState",
			"} from '../reducers/globalMsgReducer';",
			"import { IStateContext } from './ViewContext';",
			"$2",
			"export type CombinedInitialStateType = {",
			"  counterState: IAppContext;",
			"  globalMsg: IglobalMsgState;",
			"};",
			"$2",
			"export type CombinedActionType = ACTION_TYPE_GLOBAL | ACTIONTYPE",
			"$2",
			"export type combineReducersType = (state: CombinedInitialStateType," ,"action: CombinedActionType) => IStateContext",
			"$2",
			"export const [reducerCombined, initialStateCombined] =" ,"combineReducers<combineReducersType>({",
			"  counterState: [appReducer, initialState],",
			"  globalMsg: [globalMsgReducer, globalMsgState]",
			"  // ...",
			"});",
		],
		"description": "Combined reducers Context API with useReducer example"
	},
	"ContextAPI-reducer-example-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-combinedReducers",
		"body": [
			"import { Dispatch } from 'react';",
			"$2",
			"export enum ACTIONS_TYPES {",
			"   INCREMENT,",
			"   DECREMENT",
			"}",
			"$2",
			"export type ACTIONTYPE =",
			"   | { type: ACTIONS_TYPES.INCREMENT; payload: number }",
			"   | { type: ACTIONS_TYPES.DECREMENT; payload: number };",
			"$2",
			"export interface IAppContext {",
			"   title: string,",
			"   count: number,",
			"   dispatch: Dispatch<ACTIONTYPE>,",
			"}",
			"$2",
			"export const initialState: IAppContext = {",
			"   title: 'Global text',",
			"   count: 0,",
			"   dispatch: () => null",
			"}",
			"$2",
			"export function appReducer(state: IAppContext, action: ACTIONTYPE) {",
			"   switch (action.type) {",
			"       case ACTIONS_TYPES.INCREMENT:",
			"           return { ...state, count: state.count + action.payload };",
			"       case ACTIONS_TYPES.DECREMENT:",
			"           return { ...state, count: state.count - action.payload };",
			"       default:",
			"           return state",
			"   }",
			"}",
		],
		"description": "Combined reducers Context API with useReducer example"
	},
	"ContextAPI-actions-example-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-combinedReducers",
		"body":[
		"import { CombinedActionType } from './context/combinedReducers'",
		"import { ACTIONS_TYPES } from './reducers/appReducer'",
		"$2",
		"const increaseCountAction = (dispatch: React.Dispatch<CombinedActionType>) => dispatch({ type: ACTIONS_TYPES.INCREMENT, payload: 2 })",
		"const decreaseCountAction = (dispatch: React.Dispatch<CombinedActionType>) => dispatch({ type: ACTIONS_TYPES.DECREMENT, payload: 1 })",
		"$2",
		"export {",
		"   increaseCountAction,",
		"   decreaseCountAction",
		"}",
		],
		"description": "Combined reducers Context API with useReducer example"
	},
}
