{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Example Redux Toolkit Store": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-store",
		"body": [
			"import { configureStore } from '@reduxjs/toolkit'",
			"import logger from 'redux-logger'",
			"//slices",
			"import { loadingSlice, todoSlice } from '../features';",
			"$1",
			"export const store = configureStore({",
			"    reducer:{",
			"       loading: loadingSlice,",
			"       todosList: todoSlice,",
			"    },",
			"    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),",
			"    devTools: process.env.NODE_ENV !== 'production',",
			"})",
			"$1",
			"export type RootState = ReturnType<typeof store.getState>",
			"export type AppDispatch = typeof store.dispatch;",
		],
		"description": "Example Redux Toolkit Store"
	},
	"Example1 Redux Toolkit Slice": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-slice1",
		"body": [
			"import { PayloadAction, createSlice } from '@reduxjs/toolkit';",
			"$2",
			"const initialState = {",
				"loading: true",
			"};",
			"$2",
			"export const loadingSlice = createSlice({",
			"   name: 'loading',",
			"   initialState,",
			"   reducers:{",
			"           setLoading: (state, action: PayloadAction<boolean>) => {",
			"           state.loading = action.payload;",
			"    }",
			"   }",
			"})",
			"$2",
			"export const { setLoading } = loadingSlice.actions;",
			"export default loadingSlice.reducer;",
		],
		"description": "Example1 Redux Toolkit Slice"
	},
	"Example2 Redux Toolkit Slice": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-slice2",
		"body": [
			"import {createSlice, PayloadAction} from '@reduxjs/toolkit';",
			"$2",
			"interface Todo{",
				"id?: number,",
				"title?:string,",
				"useId?:number,",
				"completed?: boolean",
			"}",
			"$2",
			"interface CustomerState{",
				"todos: Todo[]",
			"}",
			"$2",
			"const initialState: CustomerState = {",
				"todos: []",
			"};",
			"$2",
			"export const todoSlice = createSlice({",
			"   name: 'todos',",
			"   initialState,",
			"   reducers: {",
			"       setTodos: (state,action:PayloadAction<Todo[]>) => {",
			"           state.todos=action.payload;",
			"       }",
			"   }",
			"})",
			"$2",
			"export const { setTodos } = todoSlice.actions;",
			"export default todoSlice.reducer;",
		],
		"description": "Example2 Redux Toolkit Slice"
	},
	"React-Redux: useSelector - useDispatch": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "redux-selector-dispatch example usage",
		"body": [
			"import { useSelector, useDispatch } from 'react-redux';",
			"import { setTodos } from '../features/todoSlice';",
			"$2",
			"// ...",
			"$2",
			"const dispatch = useDispatch()",
			"const todos = useSelector((state: RootState) => state.todosList.todos)",
			"$2",
			"useEffect(() => {",
			"   (async function():Promise<void>{",
			"      const res = await fetch('https://jsonplaceholder.typicode.com/todos')",
			"      const data = await res.json()",
			"      dispatch(setTodos(data))",
			"   })()",
			"},[dispatch])",
		],
		"description": "redux-selector-dispatch example usage"
	},
	"Error boundary component": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "error-boundary-component",
		"body": [
		"import { Component, ErrorInfo, PropsWithChildren, ReactNode } from 'react';",
		"$2",
		"interface Props {",
		"   render?: (error: Error | null) => ReactNode;",
		"}",
		"$2",
		"interface State {",
		"   hasError: boolean;",
		"   error: Error | null;",
		"}",
		"$2",
		"class ErrorBoundary extends Component<PropsWithChildren<Props>, State> {",
		"   public state: State = {",
		"       hasError: false,",
		"       error: null",
		"   };",
		"$2",
		"   public componentDidCatch(error: Error, errorInfo: ErrorInfo) {",
		"       console.error('Uncaught error:', error, errorInfo);",
		"       this.setState({ hasError: true, error });",
		"   }",
		"$2",
		"   render() {",
		"       const { hasError, error } = this.state;",
		"       const { children } = this.props;",

		"       if (hasError && !this.props.render) {",
		"           return (",
		"               <div>",
		"                   <p>Oops! ha ocurrido un error inesperado</p>",
		"                   {error?.toString()}",
		"               </div>",
		"           );",
		"        };",
		"$2",
		"       if (hasError && this.props.render) {",
		"           return this.props.render(error);",
		"       };",
		"$2",
		"       return children;",
		"    }",
		"}",
		"$2",
		"export default ErrorBoundary;",
		"$2",
		"/* Usage:",
		"<FinalErrorBoundary render={(error) => <p>{`Ups D: ${error}`}</p>}>",
      	    "<MyBug />",
        "</FinalErrorBoundary> */",
		"$2",
		],
		"description": "Error boundary component"
	},
	"Code splitting - Lazyload - Supense - React Router, example": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "lazyload-suspense-example",
		"body": [
			"import React from 'react';",
			"import { Route, Routes } from 'react-router-dom'",
			"$2",
			"// Dinamic views imports",
			"const DisignPatterns = React.lazy(() => import('../views/DisignPatterns'));",
			"const DisignPrincinples = React.lazy(() => import('../views/DisignPrincinples'));",
			"const ReduxToolkit = React.lazy(() => import('../views/ReduxToolkit'));",
			"$2",
			"const DrawerRoutes = () => {",
			"   return (",
			"       <React.Suspense fallback={<h1 style={{color:'red'}}>Loading...</h1>}>",
			"           <Routes>",
			"               <Route path='/' element={<DisignPrincinples />} />",
			"               <Route path='/disignPattern' element={<DisignPatterns />} />",
			"               <Route path='/disignPrinciples' element={<DisignPrincinples />} />",
			"               <Route path='/reduxToolkit' element={<ReduxToolkit />} />",
			"           </Routes>",
			"       </React.Suspense>",
			"    )",
			"}",
			"$2",
			"export default DrawerRoutes",
		],
		"description": "Code splitting - Lazyload - Supense - React Router, example"
	},
	"ContextAPI-Provider-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-Provider",
		"body": [
			"import { createContext, useContext, useReducer } from 'react';",
			"import type { PropsWithChildren } from 'react'",
			"import {",
			"   CombinedActionType," ,
			"   CombinedInitialStateType," ,
			"   initialStateCombined,",
			"   reducerCombined" ,
			"} from './combinedReducers';",
			"$2",
			"export interface IStateContext {",
			"   state: CombinedInitialStateType;",
			"   dispatch: React.Dispatch<CombinedActionType>;",
			"}",
			"$2",
			"export const AppContext = createContext<IStateContext>(initialStateCombined);",
			"$2",
			"export const AppContextProvider = ({ children }: PropsWithChildren): JSX.Element => {",
			"$2",
			"   const [state, dispatch] = useReducer(reducerCombined, initialStateCombined)",
			"$2",
			"   return (",
			"       <AppContext.Provider value={{ state, dispatch }}>",
			"           {children}",
			"       </AppContext.Provider>",
			"   );",
			"}",
			"$2",
			"export const useAppContext = () => useContext(AppContext);",
		],
		"description": "Provider Context API example"
	},
	"ContextAPI-CombinedReducers-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-combinedReducers",
		"body": [
			"import combineReducers from 'react-combine-reducers';",
			"$2",
			"import {",
			"  ACTIONTYPE,",
			"  IAppContext,",
			"  appReducer,",
			"  initialState",
			"} from '../reducers/appReducer';",
			"import {",
			"  ACTION_TYPE_GLOBAL,",
			"  IglobalMsgState,",
			"  globalMsgReducer,",
			"  globalMsgState",
			"} from '../reducers/globalMsgReducer';",
			"import { IStateContext } from './ViewContext';",
			"$2",
			"export type CombinedInitialStateType = {",
			"  counterState: IAppContext;",
			"  globalMsg: IglobalMsgState;",
			"};",
			"$2",
			"export type CombinedActionType = ACTION_TYPE_GLOBAL | ACTIONTYPE",
			"$2",
			"export type combineReducersType = (state: CombinedInitialStateType," ,"action: CombinedActionType) => IStateContext",
			"$2",
			"export const [reducerCombined, initialStateCombined] =" ,"combineReducers<combineReducersType>({",
			"  counterState: [appReducer, initialState],",
			"  globalMsg: [globalMsgReducer, globalMsgState]",
			"  // ...",
			"});",
		],
		"description": "Combined reducers Context API with useReducer example"
	},
	"ContextAPI-reducer-example-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-reducer",
		"body": [
			"import { Dispatch } from 'react';",
			"$2",
			"export enum ACTIONS_TYPES {",
			"   INCREMENT='INCREMENT',",
			"   DECREMENT='DECREMENT'",
			"}",
			"$2",
			"export type ACTIONTYPE =",
			"   | { type: ACTIONS_TYPES.INCREMENT; payload: number }",
			"   | { type: ACTIONS_TYPES.DECREMENT; payload: number };",
			"$2",
			"export interface IAppContext {",
			"   title: string,",
			"   count: number,",
			"   dispatch: Dispatch<ACTIONTYPE>,",
			"}",
			"$2",
			"export const initialState: IAppContext = {",
			"   title: 'Global text',",
			"   count: 0,",
			"   dispatch: () => null",
			"}",
			"$2",
			"export function appReducer(state: IAppContext, action: ACTIONTYPE) {",
			"   switch (action.type) {",
			"       case ACTIONS_TYPES.INCREMENT:",
			"           return { ...state, count: state.count + action.payload };",
			"       case ACTIONS_TYPES.DECREMENT:",
			"           return { ...state, count: state.count - action.payload };",
			"       default:",
			"           return state",
			"   }",
			"}",
		],
		"description": "reducers Context API with useReducer example"
	},
	"ContextAPI-actions-example-reactjs": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "ContextAPI-actions-example",
		"body":[
		"import { CombinedActionType } from './context/combinedReducers'",
		"import { ACTIONS_TYPES } from './reducers/appReducer'",
		"$2",
		"const increaseCountAction = (dispatch: React.Dispatch<CombinedActionType>) => dispatch({ type: ACTIONS_TYPES.INCREMENT, payload: 2 })",
		"const decreaseCountAction = (dispatch: React.Dispatch<CombinedActionType>) => dispatch({ type: ACTIONS_TYPES.DECREMENT, payload: 1 })",
		"$2",
		"export {",
		"   increaseCountAction,",
		"   decreaseCountAction",
		"}",
		],
		"description": "Actions Context API with useReducer example"
	},
	"CSS-center-flexbox": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact, css",
		"prefix": "css-center-flexbox",
		"body":[
			".container {",
			"   display: flex;",
			"   flex-flow: row wrap; //direction-wrap",
			"   justify-content: flex-start;",
			"   align-items: center;",
			"}",
		],
		"description": "center responsives containers with flexbox"
	},
	"CSS-grid-template-area": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact, css",
		"prefix": "css-grid-template-area",
		"body":[
			".grid {",
			"   display: grid;",
			"   gap: 1em;",
			"$2",
			"   grid-template-areas: 'ele1 ele2 ele3'",
			"                        'ele4 ele4 ele4'",
			"                        'ele5 ele5 ele6';",
			"}",
			"$2",
			".ele1{",
			"   grid-area: ele1;",
			"}",
			"$2",
			".ele2{",
			"  grid-area: ele2;",
			"}",
			"$2",
			".ele3 {",
			"   grid-area: ele3;",
			"}",
			"$2",
			".ele4 {",
			"   grid-area: ele4;",
			"}",
			"$2",
			".ele5 {",
			"   grid-area: ele5;",
			"}",
			"$2",
			".ele6 {",
			"   grid-area: ele6;",
			"}",
			"$2",
			"/* responsive con template area*/",
			"@media screen and (max-width: 320px) {",
			"   .grid{",
			"       grid-template-areas: 'ele1 ele2'",
			"                            'ele3 ele3'",
			"                            'ele4 ele5'",
			"                            'ele6 ele6';",
			"   }",
			"}",
		],
		"description": "grid template area example"
	},
	"CSS-grid-autofit-autofill": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact, css",
		"prefix": "css-grid-autofit-autofill",
		"body":[
			".grid {",
			"   display: grid;",
			"   gap: 1em;",
			"$2",
			"   /* autofit: se ajusta para ocupar el 100% del contenedor */",
			"   grid-template-columns: repeat(",
			"       auto-fit," ,
			"       minmax(150px, 1fr)",
			"   );",
			"$2",
			"   /* autofill: no se ajusta para ocupar el 100% del contenedor */",
			"   /* grid-template-columns: repeat(",
			"       auto-fill," ,
			"       minmax(150px, 1fr)",
			"   ); */",
			"}",
		],
		"description": "grid autofit-autofill usage"
	},
	"axios-cancel-token-example": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "axios-cancel-token-example",
		"body":[
			"import * as React from 'react';",
			"import Box from '@mui/material/Box';",
			"import Tab from '@mui/material/Tab';",
			"import TabContext from '@mui/lab/TabContext';",
			"import TabList from '@mui/lab/TabList';",
			"import TabPanel from '@mui/lab/TabPanel';",
			"import axios from 'axios';",
			"$2",
			"export default function CancelToken() {",
			"   const [value, setValue] = React.useState('1');",
			"   const [data, setData] = React.useState({})",
			"$2",
			"   const handleChange = (event: React.SyntheticEvent, newValue: string) => {",
			"       setValue(newValue);",
			"   };",
			"$2",
			"   React.useEffect(() => {",
			"       const source = axios.CancelToken.source();",
			"       let isMounted = true;",
			"       (async() => {",
			"           const response = await axios.get(`https://rickandmortyapi.com/api/character/${value+2}`, { cancelToken: source.token })",
			"           if (isMounted) {",
			"               setData(response.data)",
			"           }",
			"       })()",
			"       return () => {",
			"           isMounted = false",
			"           source.cancel()",
			"       }",
			"   },[value])",
			"$2",
			"   return (",
			"      <Box sx={{ width: '100%', typography: 'body1' }}>",
			"           <TabContext value={value}>",
			"               <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>",
			"                   <TabList onChange={handleChange} aria-label='lab API tabs example'>",
			"                       <Tab label='Item One' value='1' />",
			"                       <Tab label='Item Two' value='2' />",
			"                       <Tab label='Item Three' value='3' />",
			"                   </TabList>",
			"               </Box>",
			"               {[1, 2, 3].map(item => (",
			"                   <TabPanelItem key={item.toString()} item={item.toString()} data={data}/>",
			"               ))}",
			"           </TabContext>",
			"       </Box>",
			"   );",
			"}",
			"$2",
			"const TabPanelItem = ({item, data}: {item: string, data:any}) => {",
			"   return (",
			"       <TabPanel value={item.toString()}>Item {item} {JSON.stringify(data)}</TabPanel>",
			"   )",
			"}",
		],
		"description": "axios-cancel-token-example"
	},
	"axios-interceptor-example": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "axios-cancel-token-example",
		"body":[
			"import axios, { AxiosRequestConfig } from 'axios'",
			"import { SnackbarUtilities } from '../utilities/snackbar-manager'",
			"$2",
			"type TypeWithKey<T> = { [key: string]: T }",
			"$2",
			"export const getValidationError = (errorCode: any) => {",
			"$2",
			"   const codeMatcher: TypeWithKey<string> = {",
			"       ERR_NETWORK: 'Network Error',",
			"       ERR_CANCELED: 'Request canceled'",
			"   }" ,
			"$2",
			"   return codeMatcher[errorCode] || 'Unknown error'",
			"}",
			"$2",
			"export const AxiosInterceptor = () => {",
			"$2",
			"   const updateHeader = (request: AxiosRequestConfig) => {",
			"       const token = '1212121212121212121221'",
			"       const newHeaders = {",
			"           Authorization: token,",
			"           'Content-Type': 'application/json'",
			"       }",
			"       request.headers = newHeaders;",
			"       return request;",
			"   }",
			"$2",
			"   axios.interceptors.request.use((request) => {",
			"       if (request.url?.includes('assets')) return request",
			"       return updateHeader(request)",
			"   })",
			"$2",
			"   axios.interceptors.response.use(",
			"       (response) => {",
			"           console.log(response)",
			"           return response",
			"       }," ,
			"       (error) => {",
			"           if(getValidationError(error.code) === 'Request canceled') return",
			"           SnackbarUtilities.error(getValidationError(error.code))",
			"           return Promise.reject(error)",
			"        }",
			"   )",
			"}",
		],
		"description": "axios-cancel-token-example"
	},
	"react-router-private-route-HOC": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "react-router-private-route-HOC",
		"body":[
			"import React from 'react'",
			"import {Route, Redirect} from 'react-router-dom'",
			"import useAuth from 'auth/useAuth'",
			"$2",
			"const PrivateRoute = ({component:Component,...rest}) => {",
			"$2",
			"   const auth = useAuth()",
			"$2",
			"   return (",
			"      <Route",
			"       {...rest}",
			"       >",
			"         {auth.isLogged() ? (<Component />) : (<Redirect to='/' />)}",
			"       </Route>",
			"   )",
			"}",
			"$2",
			"export default PrivateRoute",
		],
		"description": "react-router-private-route-HOC"
	},
	"Import env vite": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "env-vite",
		"body": [
			"import.meta.env.VITE_TEST",
			"$2"
		],
		"description": "Import env vite"
	},
	"Custom javascript event": {
		"scope": "javascript,typescript,javascriptreact, typescriptreact",
		"prefix": "custom-event-js",
		"body": [
		"$2",
		"//listening the custom event",
		"useEffect(() => {" ,
		"   const handleCallEvent = ((event: CustomEvent<boolean>) => {", 
		"       console.log(event.detail)", 
		"   }) as any", 
		"       window.addEventListener('testEvent', handleCallEvent)", 
		"       return () => window.removeEventListener('testEvent', handleCallEvent)", 
		"}, [])",
		"$2",
		"//execute custom event",
		"<button",
		"   onClick={() => {",
		"       const event = new CustomEvent('testEvent', { detail: 'test' } );",
		"       window.dispatchEvent(event);",
		"   }}",
		">",
		"   Custom Event",
		"</button>",
		"$2",
		],
		"description": "Custom javascript event"
	}
}
